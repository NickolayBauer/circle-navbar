{"remainingRequest":"/home/nickolay/circle_progress_bar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nickolay/circle_progress_bar/src/components/circle_bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nickolay/circle_progress_bar/src/components/circle_bar.vue","mtime":1570810541465},{"path":"/home/nickolay/circle_progress_bar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nickolay/circle_progress_bar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nickolay/circle_progress_bar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nickolay/circle_progress_bar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"Circle_bar\",\n    props: [\"from_\", \"to_\"],\n\n    data: function() {\n        return {\n            from_num: 0\n        };\n    },\n\n    mounted: function() {\n        var circle = this.$el.querySelectorAll(\".progress\");\n        var off = (this.from_ / this.to_) * 50;\n        var delay_time = (this.from_ / this.to_) * 5;\n        TweenLite.to(this.$data, delay_time, { from_num: this.from_ });\n        TweenMax.to(circle, delay_time, {\n            strokeDashoffset: -50 - off\n        });\n    }\n};\n",{"version":3,"sources":["circle_bar.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"circle_bar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <svg class=\"stat-circle\" viewBox=\"1.6 1.6 16.8 16.8\">\n        <circle class=\"bg\" cx=\"10\" cy=\"10\" r=\"8\" />\n        <circle class=\"progress\" cx=\"10\" cy=\"10\" r=\"8\" />\n        <text x=\"60%\" y=\"50%\">{{from_num.toFixed(0)}}</text>\n    </svg>\n</template>\n\n<script>\nexport default {\n    name: \"Circle_bar\",\n    props: [\"from_\", \"to_\"],\n\n    data: function() {\n        return {\n            from_num: 0\n        };\n    },\n\n    mounted: function() {\n        var circle = this.$el.querySelectorAll(\".progress\");\n        var off = (this.from_ / this.to_) * 50;\n        var delay_time = (this.from_ / this.to_) * 5;\n        TweenLite.to(this.$data, delay_time, { from_num: this.from_ });\n        TweenMax.to(circle, delay_time, {\n            strokeDashoffset: -50 - off\n        });\n    }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\" scoped>\n$color-bar-text: red;\n$cirlce-size: 100px;\n\n.stat-circle {\n    width: $cirlce-size;\n    transform: rotate(-90deg);\n\n    circle.bg {\n        fill: none;\n        stroke: grey;\n        stroke-width: 0.8;\n    }\n    circle.progress {\n        fill: none;\n        stroke: $color-bar-text;\n        stroke-width: 0.8;\n        stroke-dasharray: 50 50;\n        stroke-dashoffset: -50;\n        stroke-linecap: square;\n    }\n    text {\n        font-size: 5px;\n        font-weight: 600;\n        text-anchor: middle;\n        fill: $color-bar-text;\n        transform-origin: 50% 50%;\n        transform: rotate(90deg);\n    }\n}\n</style>\n"]}]}